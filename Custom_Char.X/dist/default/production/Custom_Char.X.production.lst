

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Aug 21 18:32:52 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17   000000                     
    18                           ; Generated 17/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4580 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     
    53                           	psect	idataCOMRAM
    54   000844                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _atly6
    58   000844  10                 	db	16
    59   000845  08                 	db	8
    60   000846  08                 	db	8
    61   000847  08                 	db	8
    62   000848  08                 	db	8
    63   000849  08                 	db	8
    64   00084A  00                 	db	0
    65   00084B  00                 	db	0
    66                           
    67                           ;initializer for _atly5
    68   00084C  01                 	db	1
    69   00084D  02                 	db	2
    70   00084E  19                 	db	25
    71   00084F  19                 	db	25
    72   000850  11                 	db	17
    73   000851  1F                 	db	31
    74   000852  00                 	db	0
    75   000853  00                 	db	0
    76                           
    77                           ;initializer for _atly4
    78   000854  09                 	db	9
    79   000855  06                 	db	6
    80   000856  00                 	db	0
    81   000857  0E                 	db	14
    82   000858  11                 	db	17
    83   000859  11                 	db	17
    84   00085A  0A                 	db	10
    85   00085B  00                 	db	0
    86                           
    87                           ;initializer for _atly3
    88   00085C  00                 	db	0
    89   00085D  00                 	db	0
    90   00085E  00                 	db	0
    91   00085F  0E                 	db	14
    92   000860  11                 	db	17
    93   000861  11                 	db	17
    94   000862  0A                 	db	10
    95   000863  00                 	db	0
    96                           
    97                           ;initializer for _atly2
    98   000864  00                 	db	0
    99   000865  08                 	db	8
   100   000866  14                 	db	20
   101   000867  0A                 	db	10
   102   000868  0A                 	db	10
   103   000869  12                 	db	18
   104   00086A  04                 	db	4
   105   00086B  08                 	db	8
   106                           
   107                           ;initializer for _atly1
   108   00086C  00                 	db	0
   109   00086D  11                 	db	17
   110   00086E  0A                 	db	10
   111   00086F  05                 	db	5
   112   000870  05                 	db	5
   113   000871  05                 	db	5
   114   000872  00                 	db	0
   115   000873  00                 	db	0
   116                           
   117                           ;initializer for _atly0
   118   000874  00                 	db	0
   119   000875  0D                 	db	13
   120   000876  12                 	db	18
   121   000877  15                 	db	21
   122   000878  15                 	db	21
   123   000879  12                 	db	18
   124   00087A  00                 	db	0
   125   00087B  00                 	db	0
   126   000000                     _PORTC	set	3970
   127   000000                     _RC2	set	31762
   128   000000                     _RC1	set	31761
   129   000000                     _RC0	set	31760
   130   000000                     _TRISC	set	3988
   131   000000                     _PORTD	set	3971
   132   000000                     _TRISD	set	3989
   133                           
   134                           ; #config settings
   135                           
   136                           	psect	cinit
   137   0008EC                     __pcinit:
   138                           	callstack 0
   139   0008EC                     start_initialization:
   140                           	callstack 0
   141   0008EC                     __initialization:
   142                           	callstack 0
   143                           
   144                           ; Initialize objects allocated to COMRAM (56 bytes)
   145                           ; load TBLPTR registers with __pidataCOMRAM
   146   0008EC  0E44               	movlw	low __pidataCOMRAM
   147   0008EE  6EF6               	movwf	tblptrl,c
   148   0008F0  0E08               	movlw	high __pidataCOMRAM
   149   0008F2  6EF7               	movwf	tblptrh,c
   150   0008F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   151   0008F6  6EF8               	movwf	tblptru,c
   152   0008F8  EE00  F001         	lfsr	0,__pdataCOMRAM
   153   0008FC  EE10 F038          	lfsr	1,56
   154   000900                     copy_data0:
   155   000900  0009               	tblrd		*+
   156   000902  CFF5 FFEE          	movff	tablat,postinc0
   157   000906  50E5               	movf	postdec1,w,c
   158   000908  50E1               	movf	fsr1l,w,c
   159   00090A  E1FA               	bnz	copy_data0
   160   00090C                     end_of_initialization:
   161                           	callstack 0
   162   00090C                     __end_of__initialization:
   163                           	callstack 0
   164   00090C  0100               	movlb	0
   165   00090E  EF89  F004         	goto	_main	;jump to C main() function
   166                           
   167                           	psect	dataCOMRAM
   168   000001                     __pdataCOMRAM:
   169                           	callstack 0
   170   000001                     _atly6:
   171                           	callstack 0
   172   000001                     	ds	8
   173   000009                     _atly5:
   174                           	callstack 0
   175   000009                     	ds	8
   176   000011                     _atly4:
   177                           	callstack 0
   178   000011                     	ds	8
   179   000019                     _atly3:
   180                           	callstack 0
   181   000019                     	ds	8
   182   000021                     _atly2:
   183                           	callstack 0
   184   000021                     	ds	8
   185   000029                     _atly1:
   186                           	callstack 0
   187   000029                     	ds	8
   188   000031                     _atly0:
   189                           	callstack 0
   190   000031                     	ds	8
   191                           
   192                           	psect	cstackCOMRAM
   193   000039                     __pcstackCOMRAM:
   194                           	callstack 0
   195   000039                     delay@j:
   196                           	callstack 0
   197                           
   198                           ; 4 bytes @ 0x0
   199   000039                     	ds	4
   200   00003D                     ??_delay:
   201                           
   202                           ; 1 bytes @ 0x4
   203   00003D                     	ds	1
   204   00003E                     delay@i:
   205                           	callstack 0
   206                           
   207                           ; 4 bytes @ 0x5
   208   00003E                     	ds	4
   209   000042                     start_func@a:
   210                           	callstack 0
   211   000042                     data@a:
   212                           	callstack 0
   213                           
   214                           ; 1 bytes @ 0x9
   215   000042                     	ds	1
   216   000043                     write_char0@i:
   217                           	callstack 0
   218                           
   219                           ; 2 bytes @ 0xA
   220   000043                     	ds	2
   221   000045                     write_char0@i_52:
   222                           	callstack 0
   223                           
   224                           ; 2 bytes @ 0xC
   225   000045                     	ds	2
   226   000047                     write_char0@i_53:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0xE
   230   000047                     	ds	2
   231   000049                     write_char0@i_54:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0x10
   235   000049                     	ds	2
   236   00004B                     write_char0@i_55:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0x12
   240   00004B                     	ds	2
   241   00004D                     write_char0@i_56:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0x14
   245   00004D                     	ds	2
   246   00004F                     write_char0@i_57:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0x16
   250   00004F                     	ds	2
   251   000051                     
   252                           ; 1 bytes @ 0x18
   253 ;;
   254 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   255 ;;
   256 ;; *************** function _main *****************
   257 ;; Defined at:
   258 ;;		line 124 in file "Custom_Char.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;		None
   261 ;; Auto vars:     Size  Location     Type
   262 ;;		None
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   272 ;;      Params:         0       0       0       0       0       0       0
   273 ;;      Locals:         0       0       0       0       0       0       0
   274 ;;      Temps:          0       0       0       0       0       0       0
   275 ;;      Totals:         0       0       0       0       0       0       0
   276 ;;Total ram usage:        0 bytes
   277 ;; Hardware stack levels required when called: 3
   278 ;; This function calls:
   279 ;;		_start_func
   280 ;;		_write_char0
   281 ;; This function is called by:
   282 ;;		Startup code after reset
   283 ;; This function uses a non-reentrant model
   284 ;;
   285                           
   286                           	psect	text0
   287   000912                     __ptext0:
   288                           	callstack 0
   289   000912                     _main:
   290                           	callstack 28
   291   000912                     
   292                           ;Custom_Char.c: 127:     TRISC=0X00;
   293   000912  0E00               	movlw	0
   294   000914  6E94               	movwf	148,c	;volatile
   295                           
   296                           ;Custom_Char.c: 128:     TRISD=0x00;
   297   000916  0E00               	movlw	0
   298   000918  6E95               	movwf	149,c	;volatile
   299   00091A                     
   300                           ;Custom_Char.c: 129:     PORTC=0xff;
   301   00091A  6882               	setf	130,c	;volatile
   302   00091C                     
   303                           ;Custom_Char.c: 130:     PORTD=0xff;
   304   00091C  6883               	setf	131,c	;volatile
   305   00091E                     
   306                           ;Custom_Char.c: 131:     start_func(0x38);
   307   00091E  0E38               	movlw	56
   308   000920  EC3E  F004         	call	_start_func
   309   000924                     
   310                           ;Custom_Char.c: 132:     start_func(0x0C);
   311   000924  0E0C               	movlw	12
   312   000926  EC3E  F004         	call	_start_func
   313   00092A                     l1041:
   314                           
   315                           ;Custom_Char.c: 134:     {;Custom_Char.c: 135:         write_char0();
   316   00092A  EC01  F003         	call	_write_char0	;wreg free
   317   00092E  EF95  F004         	goto	l1041
   318   000932  EF00  F000         	goto	start
   319   000936                     __end_of_main:
   320                           	callstack 0
   321                           
   322 ;; *************** function _write_char0 *****************
   323 ;; Defined at:
   324 ;;		line 50 in file "Custom_Char.c"
   325 ;; Parameters:    Size  Location     Type
   326 ;;		None
   327 ;; Auto vars:     Size  Location     Type
   328 ;;  i               2   22[COMRAM] int 
   329 ;;  i               2   20[COMRAM] int 
   330 ;;  i               2   18[COMRAM] int 
   331 ;;  i               2   16[COMRAM] int 
   332 ;;  i               2   14[COMRAM] int 
   333 ;;  i               2   12[COMRAM] int 
   334 ;;  i               2   10[COMRAM] int 
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   344 ;;      Params:         0       0       0       0       0       0       0
   345 ;;      Locals:        14       0       0       0       0       0       0
   346 ;;      Temps:          0       0       0       0       0       0       0
   347 ;;      Totals:        14       0       0       0       0       0       0
   348 ;;Total ram usage:       14 bytes
   349 ;; Hardware stack levels used: 1
   350 ;; Hardware stack levels required when called: 2
   351 ;; This function calls:
   352 ;;		_data
   353 ;;		_start_func
   354 ;; This function is called by:
   355 ;;		_main
   356 ;; This function uses a non-reentrant model
   357 ;;
   358                           
   359                           	psect	text1
   360   000602                     __ptext1:
   361                           	callstack 0
   362   000602                     _write_char0:
   363                           	callstack 28
   364   000602                     
   365                           ;Custom_Char.c: 52:     start_func(64);
   366   000602  0E40               	movlw	64
   367   000604  EC3E  F004         	call	_start_func
   368   000608                     
   369                           ;Custom_Char.c: 53:     for(int i=0;i<8;i++)
   370   000608  0E00               	movlw	0
   371   00060A  6E44               	movwf	(write_char0@i+1)^0,c
   372   00060C  0E00               	movlw	0
   373   00060E  6E43               	movwf	write_char0@i^0,c
   374   000610                     l931:
   375                           
   376                           ;Custom_Char.c: 54:     {;Custom_Char.c: 55:         data(atly0[i]);
   377   000610  5043               	movf	write_char0@i^0,w,c
   378   000612  0F31               	addlw	low _atly0
   379   000614  6ED9               	movwf	fsr2l,c
   380   000616  6ADA               	clrf	fsr2h,c
   381   000618  50DF               	movf	indf2,w,c
   382   00061A  EC5A  F004         	call	_data
   383   00061E                     
   384                           ;Custom_Char.c: 56:     }
   385   00061E  4A43               	infsnz	write_char0@i^0,f,c
   386   000620  2A44               	incf	(write_char0@i+1)^0,f,c
   387   000622  BE44               	btfsc	(write_char0@i+1)^0,7,c
   388   000624  EF1D  F003         	goto	u111
   389   000628  5044               	movf	(write_char0@i+1)^0,w,c
   390   00062A  E109               	bnz	u110
   391   00062C  0E08               	movlw	8
   392   00062E  5C43               	subwf	write_char0@i^0,w,c
   393   000630  A0D8               	btfss	status,0,c
   394   000632  EF1D  F003         	goto	u111
   395   000636  EF1F  F003         	goto	u110
   396   00063A                     u111:
   397   00063A  EF08  F003         	goto	l931
   398   00063E                     u110:
   399   00063E                     
   400                           ;Custom_Char.c: 57:     start_func(0x80);
   401   00063E  0E80               	movlw	128
   402   000640  EC3E  F004         	call	_start_func
   403                           
   404                           ;Custom_Char.c: 58:     data(0);
   405   000644  0E00               	movlw	0
   406   000646  EC5A  F004         	call	_data
   407                           
   408                           ;Custom_Char.c: 59:     start_func(72);
   409   00064A  0E48               	movlw	72
   410   00064C  EC3E  F004         	call	_start_func
   411   000650                     
   412                           ;Custom_Char.c: 60:     for(int i=0;i<8;i++)
   413   000650  0E00               	movlw	0
   414   000652  6E46               	movwf	(write_char0@i_52+1)^0,c
   415   000654  0E00               	movlw	0
   416   000656  6E45               	movwf	write_char0@i_52^0,c
   417   000658                     l945:
   418                           
   419                           ;Custom_Char.c: 61:     {;Custom_Char.c: 62:         data(atly1[i]);
   420   000658  5045               	movf	write_char0@i_52^0,w,c
   421   00065A  0F29               	addlw	low _atly1
   422   00065C  6ED9               	movwf	fsr2l,c
   423   00065E  6ADA               	clrf	fsr2h,c
   424   000660  50DF               	movf	indf2,w,c
   425   000662  EC5A  F004         	call	_data
   426   000666                     
   427                           ;Custom_Char.c: 63:     }
   428   000666  4A45               	infsnz	write_char0@i_52^0,f,c
   429   000668  2A46               	incf	(write_char0@i_52+1)^0,f,c
   430   00066A  BE46               	btfsc	(write_char0@i_52+1)^0,7,c
   431   00066C  EF41  F003         	goto	u121
   432   000670  5046               	movf	(write_char0@i_52+1)^0,w,c
   433   000672  E109               	bnz	u120
   434   000674  0E08               	movlw	8
   435   000676  5C45               	subwf	write_char0@i_52^0,w,c
   436   000678  A0D8               	btfss	status,0,c
   437   00067A  EF41  F003         	goto	u121
   438   00067E  EF43  F003         	goto	u120
   439   000682                     u121:
   440   000682  EF2C  F003         	goto	l945
   441   000686                     u120:
   442   000686                     
   443                           ;Custom_Char.c: 64:     start_func(0x81);
   444   000686  0E81               	movlw	129
   445   000688  EC3E  F004         	call	_start_func
   446                           
   447                           ;Custom_Char.c: 65:     data(1);
   448   00068C  0E01               	movlw	1
   449   00068E  EC5A  F004         	call	_data
   450                           
   451                           ;Custom_Char.c: 66:     start_func(80);
   452   000692  0E50               	movlw	80
   453   000694  EC3E  F004         	call	_start_func
   454   000698                     
   455                           ;Custom_Char.c: 67:     for(int i=0;i<8;i++)
   456   000698  0E00               	movlw	0
   457   00069A  6E48               	movwf	(write_char0@i_53+1)^0,c
   458   00069C  0E00               	movlw	0
   459   00069E  6E47               	movwf	write_char0@i_53^0,c
   460   0006A0                     l959:
   461                           
   462                           ;Custom_Char.c: 68:     {;Custom_Char.c: 69:         data(atly2[i]);
   463   0006A0  5047               	movf	write_char0@i_53^0,w,c
   464   0006A2  0F21               	addlw	low _atly2
   465   0006A4  6ED9               	movwf	fsr2l,c
   466   0006A6  6ADA               	clrf	fsr2h,c
   467   0006A8  50DF               	movf	indf2,w,c
   468   0006AA  EC5A  F004         	call	_data
   469   0006AE                     
   470                           ;Custom_Char.c: 70:     }
   471   0006AE  4A47               	infsnz	write_char0@i_53^0,f,c
   472   0006B0  2A48               	incf	(write_char0@i_53+1)^0,f,c
   473   0006B2  BE48               	btfsc	(write_char0@i_53+1)^0,7,c
   474   0006B4  EF65  F003         	goto	u131
   475   0006B8  5048               	movf	(write_char0@i_53+1)^0,w,c
   476   0006BA  E109               	bnz	u130
   477   0006BC  0E08               	movlw	8
   478   0006BE  5C47               	subwf	write_char0@i_53^0,w,c
   479   0006C0  A0D8               	btfss	status,0,c
   480   0006C2  EF65  F003         	goto	u131
   481   0006C6  EF67  F003         	goto	u130
   482   0006CA                     u131:
   483   0006CA  EF50  F003         	goto	l959
   484   0006CE                     u130:
   485   0006CE                     
   486                           ;Custom_Char.c: 71:     start_func(0x82);
   487   0006CE  0E82               	movlw	130
   488   0006D0  EC3E  F004         	call	_start_func
   489                           
   490                           ;Custom_Char.c: 72:     data(2);
   491   0006D4  0E02               	movlw	2
   492   0006D6  EC5A  F004         	call	_data
   493                           
   494                           ;Custom_Char.c: 73:     start_func(88);
   495   0006DA  0E58               	movlw	88
   496   0006DC  EC3E  F004         	call	_start_func
   497   0006E0                     
   498                           ;Custom_Char.c: 74:     for(int i=0;i<8;i++)
   499   0006E0  0E00               	movlw	0
   500   0006E2  6E4A               	movwf	(write_char0@i_54+1)^0,c
   501   0006E4  0E00               	movlw	0
   502   0006E6  6E49               	movwf	write_char0@i_54^0,c
   503   0006E8                     l973:
   504                           
   505                           ;Custom_Char.c: 75:     {;Custom_Char.c: 76:         data(atly3[i]);
   506   0006E8  5049               	movf	write_char0@i_54^0,w,c
   507   0006EA  0F19               	addlw	low _atly3
   508   0006EC  6ED9               	movwf	fsr2l,c
   509   0006EE  6ADA               	clrf	fsr2h,c
   510   0006F0  50DF               	movf	indf2,w,c
   511   0006F2  EC5A  F004         	call	_data
   512   0006F6                     
   513                           ;Custom_Char.c: 77:     }
   514   0006F6  4A49               	infsnz	write_char0@i_54^0,f,c
   515   0006F8  2A4A               	incf	(write_char0@i_54+1)^0,f,c
   516   0006FA  BE4A               	btfsc	(write_char0@i_54+1)^0,7,c
   517   0006FC  EF89  F003         	goto	u141
   518   000700  504A               	movf	(write_char0@i_54+1)^0,w,c
   519   000702  E109               	bnz	u140
   520   000704  0E08               	movlw	8
   521   000706  5C49               	subwf	write_char0@i_54^0,w,c
   522   000708  A0D8               	btfss	status,0,c
   523   00070A  EF89  F003         	goto	u141
   524   00070E  EF8B  F003         	goto	u140
   525   000712                     u141:
   526   000712  EF74  F003         	goto	l973
   527   000716                     u140:
   528   000716                     
   529                           ;Custom_Char.c: 78:     start_func(0x83);
   530   000716  0E83               	movlw	131
   531   000718  EC3E  F004         	call	_start_func
   532                           
   533                           ;Custom_Char.c: 79:     data(3);
   534   00071C  0E03               	movlw	3
   535   00071E  EC5A  F004         	call	_data
   536                           
   537                           ;Custom_Char.c: 80:     start_func(96);
   538   000722  0E60               	movlw	96
   539   000724  EC3E  F004         	call	_start_func
   540   000728                     
   541                           ;Custom_Char.c: 81:     for(int i=0;i<8;i++)
   542   000728  0E00               	movlw	0
   543   00072A  6E4C               	movwf	(write_char0@i_55+1)^0,c
   544   00072C  0E00               	movlw	0
   545   00072E  6E4B               	movwf	write_char0@i_55^0,c
   546   000730                     l987:
   547                           
   548                           ;Custom_Char.c: 82:     {;Custom_Char.c: 83:         data(atly4[i]);
   549   000730  504B               	movf	write_char0@i_55^0,w,c
   550   000732  0F11               	addlw	low _atly4
   551   000734  6ED9               	movwf	fsr2l,c
   552   000736  6ADA               	clrf	fsr2h,c
   553   000738  50DF               	movf	indf2,w,c
   554   00073A  EC5A  F004         	call	_data
   555   00073E                     
   556                           ;Custom_Char.c: 84:     }
   557   00073E  4A4B               	infsnz	write_char0@i_55^0,f,c
   558   000740  2A4C               	incf	(write_char0@i_55+1)^0,f,c
   559   000742  BE4C               	btfsc	(write_char0@i_55+1)^0,7,c
   560   000744  EFAD  F003         	goto	u151
   561   000748  504C               	movf	(write_char0@i_55+1)^0,w,c
   562   00074A  E109               	bnz	u150
   563   00074C  0E08               	movlw	8
   564   00074E  5C4B               	subwf	write_char0@i_55^0,w,c
   565   000750  A0D8               	btfss	status,0,c
   566   000752  EFAD  F003         	goto	u151
   567   000756  EFAF  F003         	goto	u150
   568   00075A                     u151:
   569   00075A  EF98  F003         	goto	l987
   570   00075E                     u150:
   571   00075E                     
   572                           ;Custom_Char.c: 85:     start_func(0x84);
   573   00075E  0E84               	movlw	132
   574   000760  EC3E  F004         	call	_start_func
   575                           
   576                           ;Custom_Char.c: 86:     data(4);
   577   000764  0E04               	movlw	4
   578   000766  EC5A  F004         	call	_data
   579                           
   580                           ;Custom_Char.c: 87:     start_func(104);
   581   00076A  0E68               	movlw	104
   582   00076C  EC3E  F004         	call	_start_func
   583   000770                     
   584                           ;Custom_Char.c: 88:     for(int i=0;i<8;i++)
   585   000770  0E00               	movlw	0
   586   000772  6E4E               	movwf	(write_char0@i_56+1)^0,c
   587   000774  0E00               	movlw	0
   588   000776  6E4D               	movwf	write_char0@i_56^0,c
   589   000778                     l1001:
   590                           
   591                           ;Custom_Char.c: 89:     {;Custom_Char.c: 90:         data(atly5[i]);
   592   000778  504D               	movf	write_char0@i_56^0,w,c
   593   00077A  0F09               	addlw	low _atly5
   594   00077C  6ED9               	movwf	fsr2l,c
   595   00077E  6ADA               	clrf	fsr2h,c
   596   000780  50DF               	movf	indf2,w,c
   597   000782  EC5A  F004         	call	_data
   598   000786                     
   599                           ;Custom_Char.c: 91:     }
   600   000786  4A4D               	infsnz	write_char0@i_56^0,f,c
   601   000788  2A4E               	incf	(write_char0@i_56+1)^0,f,c
   602   00078A  BE4E               	btfsc	(write_char0@i_56+1)^0,7,c
   603   00078C  EFD1  F003         	goto	u161
   604   000790  504E               	movf	(write_char0@i_56+1)^0,w,c
   605   000792  E109               	bnz	u160
   606   000794  0E08               	movlw	8
   607   000796  5C4D               	subwf	write_char0@i_56^0,w,c
   608   000798  A0D8               	btfss	status,0,c
   609   00079A  EFD1  F003         	goto	u161
   610   00079E  EFD3  F003         	goto	u160
   611   0007A2                     u161:
   612   0007A2  EFBC  F003         	goto	l1001
   613   0007A6                     u160:
   614   0007A6                     
   615                           ;Custom_Char.c: 92:     start_func(0x85);
   616   0007A6  0E85               	movlw	133
   617   0007A8  EC3E  F004         	call	_start_func
   618                           
   619                           ;Custom_Char.c: 93:     data(5);
   620   0007AC  0E05               	movlw	5
   621   0007AE  EC5A  F004         	call	_data
   622                           
   623                           ;Custom_Char.c: 94:     start_func(112);
   624   0007B2  0E70               	movlw	112
   625   0007B4  EC3E  F004         	call	_start_func
   626   0007B8                     
   627                           ;Custom_Char.c: 95:     for(int i=0;i<8;i++)
   628   0007B8  0E00               	movlw	0
   629   0007BA  6E50               	movwf	(write_char0@i_57+1)^0,c
   630   0007BC  0E00               	movlw	0
   631   0007BE  6E4F               	movwf	write_char0@i_57^0,c
   632   0007C0                     l1015:
   633                           
   634                           ;Custom_Char.c: 96:     {;Custom_Char.c: 97:         data(atly6[i]);
   635   0007C0  504F               	movf	write_char0@i_57^0,w,c
   636   0007C2  0F01               	addlw	low _atly6
   637   0007C4  6ED9               	movwf	fsr2l,c
   638   0007C6  6ADA               	clrf	fsr2h,c
   639   0007C8  50DF               	movf	indf2,w,c
   640   0007CA  EC5A  F004         	call	_data
   641   0007CE                     
   642                           ;Custom_Char.c: 98:     }
   643   0007CE  4A4F               	infsnz	write_char0@i_57^0,f,c
   644   0007D0  2A50               	incf	(write_char0@i_57+1)^0,f,c
   645   0007D2  BE50               	btfsc	(write_char0@i_57+1)^0,7,c
   646   0007D4  EFF5  F003         	goto	u171
   647   0007D8  5050               	movf	(write_char0@i_57+1)^0,w,c
   648   0007DA  E109               	bnz	u170
   649   0007DC  0E08               	movlw	8
   650   0007DE  5C4F               	subwf	write_char0@i_57^0,w,c
   651   0007E0  A0D8               	btfss	status,0,c
   652   0007E2  EFF5  F003         	goto	u171
   653   0007E6  EFF7  F003         	goto	u170
   654   0007EA                     u171:
   655   0007EA  EFE0  F003         	goto	l1015
   656   0007EE                     u170:
   657   0007EE                     
   658                           ;Custom_Char.c: 99:     start_func(0x86);
   659   0007EE  0E86               	movlw	134
   660   0007F0  EC3E  F004         	call	_start_func
   661                           
   662                           ;Custom_Char.c: 100:     data(6);
   663   0007F4  0E06               	movlw	6
   664   0007F6  EC5A  F004         	call	_data
   665   0007FA  0012               	return		;funcret
   666   0007FC                     __end_of_write_char0:
   667                           	callstack 0
   668                           
   669 ;; *************** function _start_func *****************
   670 ;; Defined at:
   671 ;;		line 21 in file "Custom_Char.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  a               1    wreg     unsigned char 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  a               1    9[COMRAM] unsigned char 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   685 ;;      Params:         0       0       0       0       0       0       0
   686 ;;      Locals:         1       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0
   688 ;;      Totals:         1       0       0       0       0       0       0
   689 ;;Total ram usage:        1 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; Hardware stack levels required when called: 1
   692 ;; This function calls:
   693 ;;		_delay
   694 ;; This function is called by:
   695 ;;		_write_char0
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text2
   701   00087C                     __ptext2:
   702                           	callstack 0
   703   00087C                     _start_func:
   704                           	callstack 28
   705                           
   706                           ;incstack = 0
   707                           ;start_func@a stored from wreg
   708   00087C  6E42               	movwf	start_func@a^0,c
   709   00087E                     
   710                           ;Custom_Char.c: 21: void start_func(unsigned char a);Custom_Char.c: 22: {;Custom_Char.c:
      +                           23:     RC0=0;
   711   00087E  9082               	bcf	3970,0,c	;volatile
   712                           
   713                           ;Custom_Char.c: 24:     RC1=0;
   714   000880  9282               	bcf	3970,1,c	;volatile
   715   000882                     
   716                           ;Custom_Char.c: 25:     PORTD=a;
   717   000882  C042  FF83         	movff	start_func@a,3971	;volatile
   718   000886                     
   719                           ;Custom_Char.c: 26:     RC2=1;
   720   000886  8482               	bsf	3970,2,c	;volatile
   721   000888                     
   722                           ;Custom_Char.c: 27:     delay(100);
   723   000888  0E64               	movlw	100
   724   00088A  6E39               	movwf	delay@j^0,c
   725   00088C  0E00               	movlw	0
   726   00088E  6E3A               	movwf	(delay@j+1)^0,c
   727   000890  0E00               	movlw	0
   728   000892  6E3B               	movwf	(delay@j+2)^0,c
   729   000894  0E00               	movlw	0
   730   000896  6E3C               	movwf	(delay@j+3)^0,c
   731   000898  ECFE  F003         	call	_delay	;wreg free
   732   00089C                     
   733                           ;Custom_Char.c: 28:     RC2=0;
   734   00089C  9482               	bcf	3970,2,c	;volatile
   735   00089E                     
   736                           ;Custom_Char.c: 29:     delay(5000);
   737   00089E  0E88               	movlw	136
   738   0008A0  6E39               	movwf	delay@j^0,c
   739   0008A2  0E13               	movlw	19
   740   0008A4  6E3A               	movwf	(delay@j+1)^0,c
   741   0008A6  0E00               	movlw	0
   742   0008A8  6E3B               	movwf	(delay@j+2)^0,c
   743   0008AA  0E00               	movlw	0
   744   0008AC  6E3C               	movwf	(delay@j+3)^0,c
   745   0008AE  ECFE  F003         	call	_delay	;wreg free
   746   0008B2  0012               	return		;funcret
   747   0008B4                     __end_of_start_func:
   748                           	callstack 0
   749                           
   750 ;; *************** function _data *****************
   751 ;; Defined at:
   752 ;;		line 31 in file "Custom_Char.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  a               1    wreg     unsigned char 
   755 ;; Auto vars:     Size  Location     Type
   756 ;;  a               1    9[COMRAM] unsigned char 
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, status,2, status,0, cstack
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   766 ;;      Params:         0       0       0       0       0       0       0
   767 ;;      Locals:         1       0       0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0
   769 ;;      Totals:         1       0       0       0       0       0       0
   770 ;;Total ram usage:        1 bytes
   771 ;; Hardware stack levels used: 1
   772 ;; Hardware stack levels required when called: 1
   773 ;; This function calls:
   774 ;;		_delay
   775 ;; This function is called by:
   776 ;;		_write_char0
   777 ;;		_display
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text3
   782   0008B4                     __ptext3:
   783                           	callstack 0
   784   0008B4                     _data:
   785                           	callstack 28
   786                           
   787                           ;incstack = 0
   788                           ;data@a stored from wreg
   789   0008B4  6E42               	movwf	data@a^0,c
   790   0008B6                     
   791                           ;Custom_Char.c: 31: void data(unsigned char a);Custom_Char.c: 32: {;Custom_Char.c: 33:  
      +                             RC0=1;
   792   0008B6  8082               	bsf	3970,0,c	;volatile
   793                           
   794                           ;Custom_Char.c: 34:     RC1=0;
   795   0008B8  9282               	bcf	3970,1,c	;volatile
   796   0008BA                     
   797                           ;Custom_Char.c: 35:     PORTD=a;
   798   0008BA  C042  FF83         	movff	data@a,3971	;volatile
   799   0008BE                     
   800                           ;Custom_Char.c: 36:     RC2=1;
   801   0008BE  8482               	bsf	3970,2,c	;volatile
   802   0008C0                     
   803                           ;Custom_Char.c: 37:     delay(100);
   804   0008C0  0E64               	movlw	100
   805   0008C2  6E39               	movwf	delay@j^0,c
   806   0008C4  0E00               	movlw	0
   807   0008C6  6E3A               	movwf	(delay@j+1)^0,c
   808   0008C8  0E00               	movlw	0
   809   0008CA  6E3B               	movwf	(delay@j+2)^0,c
   810   0008CC  0E00               	movlw	0
   811   0008CE  6E3C               	movwf	(delay@j+3)^0,c
   812   0008D0  ECFE  F003         	call	_delay	;wreg free
   813   0008D4                     
   814                           ;Custom_Char.c: 39:     RC2=0;
   815   0008D4  9482               	bcf	3970,2,c	;volatile
   816   0008D6                     
   817                           ;Custom_Char.c: 40:     delay(5000);
   818   0008D6  0E88               	movlw	136
   819   0008D8  6E39               	movwf	delay@j^0,c
   820   0008DA  0E13               	movlw	19
   821   0008DC  6E3A               	movwf	(delay@j+1)^0,c
   822   0008DE  0E00               	movlw	0
   823   0008E0  6E3B               	movwf	(delay@j+2)^0,c
   824   0008E2  0E00               	movlw	0
   825   0008E4  6E3C               	movwf	(delay@j+3)^0,c
   826   0008E6  ECFE  F003         	call	_delay	;wreg free
   827   0008EA  0012               	return		;funcret
   828   0008EC                     __end_of_data:
   829                           	callstack 0
   830                           
   831 ;; *************** function _delay *****************
   832 ;; Defined at:
   833 ;;		line 17 in file "Custom_Char.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;  j               4    0[COMRAM] long 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  i               4    5[COMRAM] long 
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2, status,0
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   847 ;;      Params:         4       0       0       0       0       0       0
   848 ;;      Locals:         4       0       0       0       0       0       0
   849 ;;      Temps:          1       0       0       0       0       0       0
   850 ;;      Totals:         9       0       0       0       0       0       0
   851 ;;Total ram usage:        9 bytes
   852 ;; Hardware stack levels used: 1
   853 ;; This function calls:
   854 ;;		Nothing
   855 ;; This function is called by:
   856 ;;		_start_func
   857 ;;		_data
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text4
   862   0007FC                     __ptext4:
   863                           	callstack 0
   864   0007FC                     _delay:
   865                           	callstack 28
   866   0007FC                     
   867                           ;Custom_Char.c: 17: void delay(long j);Custom_Char.c: 18: {;Custom_Char.c: 19:     for(l
      +                          ong i=0;i<=j;i++);
   868   0007FC  0E00               	movlw	0
   869   0007FE  6E3E               	movwf	delay@i^0,c
   870   000800  0E00               	movlw	0
   871   000802  6E3F               	movwf	(delay@i+1)^0,c
   872   000804  0E00               	movlw	0
   873   000806  6E40               	movwf	(delay@i+2)^0,c
   874   000808  0E00               	movlw	0
   875   00080A  6E41               	movwf	(delay@i+3)^0,c
   876   00080C  EF0E  F004         	goto	l31
   877   000810                     l897:
   878   000810  0E01               	movlw	1
   879   000812  263E               	addwf	delay@i^0,f,c
   880   000814  0E00               	movlw	0
   881   000816  223F               	addwfc	(delay@i+1)^0,f,c
   882   000818  2240               	addwfc	(delay@i+2)^0,f,c
   883   00081A  2241               	addwfc	(delay@i+3)^0,f,c
   884   00081C                     l31:
   885   00081C  503E               	movf	delay@i^0,w,c
   886   00081E  5C39               	subwf	delay@j^0,w,c
   887   000820  503F               	movf	(delay@i+1)^0,w,c
   888   000822  583A               	subwfb	(delay@j+1)^0,w,c
   889   000824  5040               	movf	(delay@i+2)^0,w,c
   890   000826  583B               	subwfb	(delay@j+2)^0,w,c
   891   000828  503C               	movf	(delay@j+3)^0,w,c
   892   00082A  0A80               	xorlw	128
   893   00082C  6E3D               	movwf	??_delay^0,c
   894   00082E  5041               	movf	(delay@i+3)^0,w,c
   895   000830  0A80               	xorlw	128
   896   000832  583D               	subwfb	??_delay^0,w,c
   897   000834  B0D8               	btfsc	status,0,c
   898   000836  EF1F  F004         	goto	u101
   899   00083A  EF21  F004         	goto	u100
   900   00083E                     u101:
   901   00083E  EF08  F004         	goto	l897
   902   000842                     u100:
   903   000842  0012               	return		;funcret
   904   000844                     __end_of_delay:
   905                           	callstack 0
   906                           
   907                           	psect	smallconst
   908   000600                     __psmallconst:
   909                           	callstack 0
   910   000600  00                 	db	0
   911   000601  00                 	db	0	; dummy byte at the end
   912   000000                     
   913                           	psect	rparam
   914   000000                     tosu	equ	0xFFF
   915                           tosh	equ	0xFFE
   916                           tosl	equ	0xFFD
   917                           stkptr	equ	0xFFC
   918                           pclatu	equ	0xFFB
   919                           pclath	equ	0xFFA
   920                           pcl	equ	0xFF9
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           prodh	equ	0xFF4
   926                           prodl	equ	0xFF3
   927                           indf0	equ	0xFEF
   928                           postinc0	equ	0xFEE
   929                           postdec0	equ	0xFED
   930                           preinc0	equ	0xFEC
   931                           plusw0	equ	0xFEB
   932                           fsr0h	equ	0xFEA
   933                           fsr0l	equ	0xFE9
   934                           wreg	equ	0xFE8
   935                           indf1	equ	0xFE7
   936                           postinc1	equ	0xFE6
   937                           postdec1	equ	0xFE5
   938                           preinc1	equ	0xFE4
   939                           plusw1	equ	0xFE3
   940                           fsr1h	equ	0xFE2
   941                           fsr1l	equ	0xFE1
   942                           bsr	equ	0xFE0
   943                           indf2	equ	0xFDF
   944                           postinc2	equ	0xFDE
   945                           postdec2	equ	0xFDD
   946                           preinc2	equ	0xFDC
   947                           plusw2	equ	0xFDB
   948                           fsr2h	equ	0xFDA
   949                           fsr2l	equ	0xFD9
   950                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        56
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     24      80
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_write_char0
    _write_char0->_data
    _write_char0->_start_func
    _start_func->_delay
    _data->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1592
                         _start_func
                        _write_char0
 ---------------------------------------------------------------------------------
 (1) _write_char0                                         14    14      0    1220
                                             10 COMRAM    14    14      0
                               _data
                         _start_func
 ---------------------------------------------------------------------------------
 (2) _start_func                                           1     1      0     372
                                              9 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _data                                                 1     1      0     372
                                              9 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                9     5      4     350
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _start_func
     _delay
   _write_char0
     _data
       _delay
     _start_func

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      20        0.0%
BITBIGSFRl         282      0       0      18        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRhh         6A      0       0      16        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     18      50       1       84.2%
BITBIGSFRhl         10      0       0      17        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      50      19        0.0%
DATA                 0      0      50       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Aug 21 18:32:52 2024

                     l31 081C                       l40 08EA                       l34 0842  
                     l37 08B2                       l63 07FA                      l901 0882  
                    l911 08B6                      l903 0886                      l921 08D6  
                    l913 08BA                      l905 0888                      l915 08BE  
                    l907 089C                      l931 0610                      l923 0602  
                    l917 08C0                      l909 089E                      l933 061E  
                    l925 0608                      l919 08D4                      l951 0686  
                    l935 0622                      l961 06AE                      l953 0698  
                    l945 0658                      l937 063E                      l963 06B2  
                    l947 0666                      l939 0650                      l981 0728  
                    l973 06E8                      l965 06CE                      l949 066A  
                    l895 07FC                      l991 0742                      l975 06F6  
                    l967 06E0                      l959 06A0                      l897 0810  
                    l993 075E                      l977 06FA                      l899 087E  
                    l995 0770                      l987 0730                      l979 0716  
                    l989 073E                      _RC0 7C10                      _RC1 7C11  
                    _RC2 7C12                      u100 0842                      u101 083E  
                    u110 063E                      u111 063A                      u120 0686  
                    u121 0682                      u130 06CE                      u131 06CA  
                    u140 0716                      u141 0712                      u150 075E  
                    u151 075A                      u160 07A6                      u161 07A2  
                    u170 07EE                      u171 07EA                     l1001 0778  
                   l1003 0786                     l1021 07EE                     l1005 078A  
                   l1015 07C0                     l1007 07A6                     l1031 0912  
                   l1017 07CE                     l1009 07B8                     l1041 092A  
                   l1033 091A                     l1019 07D2                     l1035 091C  
                   l1037 091E                     l1039 0924                     _data 08B4  
                   _main 0912                     fsr2h 0FDA                     indf2 0FDF  
                   fsr1l 0FE1                     fsr2l 0FD9                     start 0000  
           ___param_bank 0000                    ?_data 0039                    ?_main 0039  
                  _PORTC 0F82                    _PORTD 0F83                    _TRISC 0F94  
                  _TRISD 0F95              _write_char0 0602                    _delay 07FC  
                  _atly0 0031                    _atly1 0029                    _atly2 0021  
                  _atly3 0019                    _atly4 0011                    _atly5 0009  
                  _atly6 0001                    data@a 0042          write_char0@i_52 0045  
        write_char0@i_53 0047          write_char0@i_54 0049          write_char0@i_55 004B  
        write_char0@i_56 004D          write_char0@i_57 004F                    tablat 0FF5  
                  status 0FD8          __initialization 08EC             __end_of_data 08EC  
           __end_of_main 0936                   ??_data 0042                   ??_main 0051  
          __activetblptr 0000                   ?_delay 0039                   delay@i 003E  
                 delay@j 0039                   isa$std 0001             __pdataCOMRAM 0001  
           __mediumconst 0000                   tblptrh 0FF7                   tblptrl 0FF6  
                 tblptru 0FF8               __accesstop 0060  __end_of__initialization 090C  
          ___rparam_used 0001           __pcstackCOMRAM 0039            __end_of_delay 0844  
                ??_delay 003D             ?_write_char0 0039                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0600                  __pcinit 08EC  
                __ramtop 0600                  __ptext0 0912                  __ptext1 0602  
                __ptext2 087C                  __ptext3 08B4                  __ptext4 07FC  
   end_of_initialization 090C                  postdec1 0FE5                  postinc0 0FEE  
             _start_func 087C             write_char0@i 0043            __pidataCOMRAM 0844  
    start_initialization 08EC              start_func@a 0042              ?_start_func 0039  
            __smallconst 0600                copy_data0 0900                 __Hrparam 0000  
               __Lrparam 0000                 isa$xinst 0000            ??_write_char0 0043  
           ??_start_func 0042       __end_of_start_func 08B4      __end_of_write_char0 07FC  
