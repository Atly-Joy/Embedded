

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Aug 07 10:25:40 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16   000000                     
    17                           ; Generated 17/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4580 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000000                     _RC3	set	31763
    52   000000                     _RC2	set	31762
    53   000000                     _RC1	set	31761
    54   000000                     _RC0	set	31760
    55   000000                     _TRISC	set	3988
    56   000000                     _PORTD	set	3971
    57   000000                     _TRISD	set	3989
    58                           
    59                           	psect	smallconst
    60   000600                     __psmallconst:
    61                           	callstack 0
    62   000600  00                 	db	0
    63   000601                     STR_1:
    64   000601  41                 	db	65	;'A'
    65   000602  74                 	db	116	;'t'
    66   000603  6C                 	db	108	;'l'
    67   000604  79                 	db	121	;'y'
    68   000605  00                 	db	0
    69   000606  00                 	db	0	; dummy byte at the end
    70   000000                     
    71                           ; #config settings
    72                           
    73                           	psect	cinit
    74   00075E                     __pcinit:
    75                           	callstack 0
    76   00075E                     start_initialization:
    77                           	callstack 0
    78   00075E                     __initialization:
    79                           	callstack 0
    80                           
    81                           ; Clear objects allocated to COMRAM (2 bytes)
    82   00075E  6A0F               	clrf	(__pbssCOMRAM+1)& (0+255),c
    83   000760  6A0E               	clrf	__pbssCOMRAM& (0+255),c
    84   000762                     end_of_initialization:
    85                           	callstack 0
    86   000762                     __end_of__initialization:
    87                           	callstack 0
    88   000762  0E00               	movlw	low (__Lsmallconst shr (0+16))
    89   000764  6EF8               	movwf	tblptru,c
    90   000766  0E06               	movlw	high __Lsmallconst
    91   000768  6EF7               	movwf	tblptrh,c
    92   00076A  0100               	movlb	0
    93   00076C  EF04  F003         	goto	_main	;jump to C main() function
    94                           
    95                           	psect	bssCOMRAM
    96   00000E                     __pbssCOMRAM:
    97                           	callstack 0
    98   00000E                     _p:
    99                           	callstack 0
   100   00000E                     	ds	2
   101                           
   102                           	psect	cstackCOMRAM
   103   000001                     __pcstackCOMRAM:
   104                           	callstack 0
   105   000001                     delay@j:
   106                           	callstack 0
   107                           
   108                           ; 4 bytes @ 0x0
   109   000001                     	ds	4
   110   000005                     ??_delay:
   111                           
   112                           ; 1 bytes @ 0x4
   113   000005                     	ds	1
   114   000006                     delay@i:
   115                           	callstack 0
   116                           
   117                           ; 4 bytes @ 0x5
   118   000006                     	ds	4
   119   00000A                     start_func@a:
   120                           	callstack 0
   121   00000A                     data@a:
   122                           	callstack 0
   123                           
   124                           ; 1 bytes @ 0x9
   125   00000A                     	ds	1
   126   00000B                     display@p:
   127                           	callstack 0
   128                           
   129                           ; 1 bytes @ 0xA
   130   00000B                     	ds	1
   131   00000C                     main@count:
   132                           	callstack 0
   133                           
   134                           ; 2 bytes @ 0xB
   135   00000C                     	ds	2
   136                           
   137 ;;
   138 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   139 ;;
   140 ;; *************** function _main *****************
   141 ;; Defined at:
   142 ;;		line 45 in file "NameScroll.c"
   143 ;; Parameters:    Size  Location     Type
   144 ;;		None
   145 ;; Auto vars:     Size  Location     Type
   146 ;;  count           2   11[COMRAM] int 
   147 ;; Return value:  Size  Location     Type
   148 ;;                  1    wreg      void 
   149 ;; Registers used:
   150 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   151 ;; Tracked objects:
   152 ;;		On entry : 0/0
   153 ;;		On exit  : 0/0
   154 ;;		Unchanged: 0/0
   155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   156 ;;      Params:         0       0       0       0       0       0       0
   157 ;;      Locals:         2       0       0       0       0       0       0
   158 ;;      Temps:          0       0       0       0       0       0       0
   159 ;;      Totals:         2       0       0       0       0       0       0
   160 ;;Total ram usage:        2 bytes
   161 ;; Hardware stack levels required when called: 3
   162 ;; This function calls:
   163 ;;		_data
   164 ;;		_display
   165 ;;		_start_func
   166 ;; This function is called by:
   167 ;;		Startup code after reset
   168 ;; This function uses a non-reentrant model
   169 ;;
   170                           
   171                           	psect	text0
   172   000608                     __ptext0:
   173                           	callstack 0
   174   000608                     _main:
   175                           	callstack 28
   176   000608                     
   177                           ;NameScroll.c: 47:     TRISC=0x08;
   178   000608  0E08               	movlw	8
   179   00060A  6E94               	movwf	148,c	;volatile
   180                           
   181                           ;NameScroll.c: 48:     TRISD=0x00;
   182   00060C  0E00               	movlw	0
   183   00060E  6E95               	movwf	149,c	;volatile
   184                           
   185                           ;NameScroll.c: 49:     int count=0;
   186   000610  0E00               	movlw	0
   187   000612  6E0D               	movwf	(main@count+1)^0,c
   188   000614  0E00               	movlw	0
   189   000616  6E0C               	movwf	main@count^0,c
   190   000618                     
   191                           ;NameScroll.c: 51:     {;NameScroll.c: 52:         start_func(0x01);
   192   000618  0E01               	movlw	1
   193   00061A  EC61  F003         	call	_start_func
   194   00061E                     
   195                           ;NameScroll.c: 53:         start_func(0x0f);
   196   00061E  0E0F               	movlw	15
   197   000620  EC61  F003         	call	_start_func
   198   000624                     
   199                           ;NameScroll.c: 54:         start_func(0x0f);
   200   000624  0E0F               	movlw	15
   201   000626  EC61  F003         	call	_start_func
   202   00062A                     
   203                           ;NameScroll.c: 55:         display("Atly");
   204   00062A  0E01               	movlw	low STR_1
   205   00062C  6E0B               	movwf	display@p^0,c
   206   00062E  EC99  F003         	call	_display	;wreg free
   207   000632                     l825:
   208                           
   209                           ;NameScroll.c: 57:             {;NameScroll.c: 64:                 if(RC3==1 && count>=0
      +                          )
   210   000632  A682               	btfss	3970,3,c	;volatile
   211   000634  EF1E  F003         	goto	u81
   212   000638  EF20  F003         	goto	u80
   213   00063C                     u81:
   214   00063C  EF19  F003         	goto	l825
   215   000640                     u80:
   216   000640  BE0D               	btfsc	(main@count+1)^0,7,c
   217   000642  EF25  F003         	goto	u91
   218   000646  EF27  F003         	goto	u90
   219   00064A                     u91:
   220   00064A  EF19  F003         	goto	l825
   221   00064E                     u90:
   222   00064E                     
   223                           ;NameScroll.c: 65:                 {;NameScroll.c: 66:                     start_func(0x
      +                          10);
   224   00064E  0E10               	movlw	16
   225   000650  EC61  F003         	call	_start_func
   226                           
   227                           ;NameScroll.c: 67:                     data(' ');
   228   000654  0E20               	movlw	32
   229   000656  EC7D  F003         	call	_data
   230                           
   231                           ;NameScroll.c: 68:                     start_func(0x10);
   232   00065A  0E10               	movlw	16
   233   00065C  EC61  F003         	call	_start_func
   234   000660                     
   235                           ;NameScroll.c: 69:                     count++;
   236   000660  4A0C               	infsnz	main@count^0,f,c
   237   000662  2A0D               	incf	(main@count+1)^0,f,c
   238   000664                     l42:
   239   000664  B682               	btfsc	3970,3,c	;volatile
   240   000666  EF37  F003         	goto	u101
   241   00066A  EF39  F003         	goto	u100
   242   00066E                     u101:
   243   00066E  EF32  F003         	goto	l42
   244   000672                     u100:
   245   000672  EF19  F003         	goto	l825
   246   000676  EF00  F000         	goto	start
   247   00067A                     __end_of_main:
   248                           	callstack 0
   249                           
   250 ;; *************** function _start_func *****************
   251 ;; Defined at:
   252 ;;		line 15 in file "NameScroll.c"
   253 ;; Parameters:    Size  Location     Type
   254 ;;  a               1    wreg     unsigned char 
   255 ;; Auto vars:     Size  Location     Type
   256 ;;  a               1    9[COMRAM] unsigned char 
   257 ;; Return value:  Size  Location     Type
   258 ;;                  1    wreg      void 
   259 ;; Registers used:
   260 ;;		wreg, status,2, status,0, cstack
   261 ;; Tracked objects:
   262 ;;		On entry : 0/0
   263 ;;		On exit  : 0/0
   264 ;;		Unchanged: 0/0
   265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   266 ;;      Params:         0       0       0       0       0       0       0
   267 ;;      Locals:         1       0       0       0       0       0       0
   268 ;;      Temps:          0       0       0       0       0       0       0
   269 ;;      Totals:         1       0       0       0       0       0       0
   270 ;;Total ram usage:        1 bytes
   271 ;; Hardware stack levels used: 1
   272 ;; Hardware stack levels required when called: 1
   273 ;; This function calls:
   274 ;;		_delay
   275 ;; This function is called by:
   276 ;;		_main
   277 ;; This function uses a non-reentrant model
   278 ;;
   279                           
   280                           	psect	text1
   281   0006C2                     __ptext1:
   282                           	callstack 0
   283   0006C2                     _start_func:
   284                           	callstack 29
   285                           
   286                           ;incstack = 0
   287                           ;start_func@a stored from wreg
   288   0006C2  6E0A               	movwf	start_func@a^0,c
   289   0006C4                     
   290                           ;NameScroll.c: 15: void start_func(unsigned char a);NameScroll.c: 16: {;NameScroll.c: 17
      +                          :     RC0=0;
   291   0006C4  9082               	bcf	3970,0,c	;volatile
   292                           
   293                           ;NameScroll.c: 18:     RC1=0;
   294   0006C6  9282               	bcf	3970,1,c	;volatile
   295   0006C8                     
   296                           ;NameScroll.c: 19:     PORTD=a;
   297   0006C8  C00A  FF83         	movff	start_func@a,3971	;volatile
   298   0006CC                     
   299                           ;NameScroll.c: 20:     RC2=1;
   300   0006CC  8482               	bsf	3970,2,c	;volatile
   301   0006CE                     
   302                           ;NameScroll.c: 21:     delay(100);
   303   0006CE  0E64               	movlw	100
   304   0006D0  6E01               	movwf	delay@j^0,c
   305   0006D2  0E00               	movlw	0
   306   0006D4  6E02               	movwf	(delay@j+1)^0,c
   307   0006D6  0E00               	movlw	0
   308   0006D8  6E03               	movwf	(delay@j+2)^0,c
   309   0006DA  0E00               	movlw	0
   310   0006DC  6E04               	movwf	(delay@j+3)^0,c
   311   0006DE  EC3D  F003         	call	_delay	;wreg free
   312   0006E2                     
   313                           ;NameScroll.c: 22:     RC2=0;
   314   0006E2  9482               	bcf	3970,2,c	;volatile
   315   0006E4                     
   316                           ;NameScroll.c: 23:     delay(5000);
   317   0006E4  0E88               	movlw	136
   318   0006E6  6E01               	movwf	delay@j^0,c
   319   0006E8  0E13               	movlw	19
   320   0006EA  6E02               	movwf	(delay@j+1)^0,c
   321   0006EC  0E00               	movlw	0
   322   0006EE  6E03               	movwf	(delay@j+2)^0,c
   323   0006F0  0E00               	movlw	0
   324   0006F2  6E04               	movwf	(delay@j+3)^0,c
   325   0006F4  EC3D  F003         	call	_delay	;wreg free
   326   0006F8  0012               	return		;funcret
   327   0006FA                     __end_of_start_func:
   328                           	callstack 0
   329                           
   330 ;; *************** function _display *****************
   331 ;; Defined at:
   332 ;;		line 36 in file "NameScroll.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;  p               1   10[COMRAM] PTR const unsigned char 
   335 ;;		 -> STR_1(5), 
   336 ;; Auto vars:     Size  Location     Type
   337 ;;		None
   338 ;; Return value:  Size  Location     Type
   339 ;;                  1    wreg      void 
   340 ;; Registers used:
   341 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   342 ;; Tracked objects:
   343 ;;		On entry : 0/0
   344 ;;		On exit  : 0/0
   345 ;;		Unchanged: 0/0
   346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   347 ;;      Params:         1       0       0       0       0       0       0
   348 ;;      Locals:         0       0       0       0       0       0       0
   349 ;;      Temps:          0       0       0       0       0       0       0
   350 ;;      Totals:         1       0       0       0       0       0       0
   351 ;;Total ram usage:        1 bytes
   352 ;; Hardware stack levels used: 1
   353 ;; Hardware stack levels required when called: 2
   354 ;; This function calls:
   355 ;;		_data
   356 ;; This function is called by:
   357 ;;		_main
   358 ;; This function uses a non-reentrant model
   359 ;;
   360                           
   361                           	psect	text2
   362   000732                     __ptext2:
   363                           	callstack 0
   364   000732                     _display:
   365                           	callstack 28
   366   000732                     
   367                           ;NameScroll.c: 36: void display(const char *p);NameScroll.c: 37: {;NameScroll.c: 38:    
      +                           while(*p)
   368   000732  EFA2  F003         	goto	l813
   369   000736                     l809:
   370                           
   371                           ;NameScroll.c: 39:     {;NameScroll.c: 40:         data(*p);
   372   000736  C00B  FFF6         	movff	display@p,tblptrl
   373   00073A                     	if	0	;There is only one active tblptr byte
   374   00073A                     	endif
   375   00073A                     	if	0	;tblptru may be non-zero
   376   00073A                     	endif
   377   00073A                     	if	0	;tblptru may be non-zero
   378   00073A                     	endif
   379   00073A  0008               	tblrd		*
   380   00073C  50F5               	movf	tablat,w,c
   381   00073E  EC7D  F003         	call	_data
   382   000742                     
   383                           ;NameScroll.c: 41:         p++;
   384   000742  2A0B               	incf	display@p^0,f,c
   385   000744                     l813:
   386                           
   387                           ;NameScroll.c: 38:     while(*p)
   388   000744  C00B  FFF6         	movff	display@p,tblptrl
   389   000748                     	if	0	;There is only one active tblptr byte
   390   000748                     	endif
   391   000748                     	if	0	;tblptru may be non-zero
   392   000748                     	endif
   393   000748                     	if	0	;tblptru may be non-zero
   394   000748                     	endif
   395   000748  0008               	tblrd		*
   396   00074A  50F5               	movf	tablat,w,c
   397   00074C  0900               	iorlw	0
   398   00074E  A4D8               	btfss	status,2,c
   399   000750  EFAC  F003         	goto	u71
   400   000754  EFAE  F003         	goto	u70
   401   000758                     u71:
   402   000758  EF9B  F003         	goto	l809
   403   00075C                     u70:
   404   00075C  0012               	return		;funcret
   405   00075E                     __end_of_display:
   406                           	callstack 0
   407                           
   408 ;; *************** function _data *****************
   409 ;; Defined at:
   410 ;;		line 25 in file "NameScroll.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;  a               1    wreg     unsigned char 
   413 ;; Auto vars:     Size  Location     Type
   414 ;;  a               1    9[COMRAM] unsigned char 
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, status,2, status,0, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : 0/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   424 ;;      Params:         0       0       0       0       0       0       0
   425 ;;      Locals:         1       0       0       0       0       0       0
   426 ;;      Temps:          0       0       0       0       0       0       0
   427 ;;      Totals:         1       0       0       0       0       0       0
   428 ;;Total ram usage:        1 bytes
   429 ;; Hardware stack levels used: 1
   430 ;; Hardware stack levels required when called: 1
   431 ;; This function calls:
   432 ;;		_delay
   433 ;; This function is called by:
   434 ;;		_display
   435 ;;		_main
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           	psect	text3
   440   0006FA                     __ptext3:
   441                           	callstack 0
   442   0006FA                     _data:
   443                           	callstack 28
   444                           
   445                           ;incstack = 0
   446                           ;data@a stored from wreg
   447   0006FA  6E0A               	movwf	data@a^0,c
   448   0006FC                     
   449                           ;NameScroll.c: 25: void data(unsigned char a);NameScroll.c: 26: {;NameScroll.c: 27:     
      +                          RC0=1;
   450   0006FC  8082               	bsf	3970,0,c	;volatile
   451                           
   452                           ;NameScroll.c: 28:     RC1=0;
   453   0006FE  9282               	bcf	3970,1,c	;volatile
   454   000700                     
   455                           ;NameScroll.c: 29:     PORTD=a;
   456   000700  C00A  FF83         	movff	data@a,3971	;volatile
   457   000704                     
   458                           ;NameScroll.c: 30:     RC2=1;
   459   000704  8482               	bsf	3970,2,c	;volatile
   460   000706                     
   461                           ;NameScroll.c: 31:     delay(100);
   462   000706  0E64               	movlw	100
   463   000708  6E01               	movwf	delay@j^0,c
   464   00070A  0E00               	movlw	0
   465   00070C  6E02               	movwf	(delay@j+1)^0,c
   466   00070E  0E00               	movlw	0
   467   000710  6E03               	movwf	(delay@j+2)^0,c
   468   000712  0E00               	movlw	0
   469   000714  6E04               	movwf	(delay@j+3)^0,c
   470   000716  EC3D  F003         	call	_delay	;wreg free
   471   00071A                     
   472                           ;NameScroll.c: 33:     RC2=0;
   473   00071A  9482               	bcf	3970,2,c	;volatile
   474   00071C                     
   475                           ;NameScroll.c: 34:     delay(5000);
   476   00071C  0E88               	movlw	136
   477   00071E  6E01               	movwf	delay@j^0,c
   478   000720  0E13               	movlw	19
   479   000722  6E02               	movwf	(delay@j+1)^0,c
   480   000724  0E00               	movlw	0
   481   000726  6E03               	movwf	(delay@j+2)^0,c
   482   000728  0E00               	movlw	0
   483   00072A  6E04               	movwf	(delay@j+3)^0,c
   484   00072C  EC3D  F003         	call	_delay	;wreg free
   485   000730  0012               	return		;funcret
   486   000732                     __end_of_data:
   487                           	callstack 0
   488                           
   489 ;; *************** function _delay *****************
   490 ;; Defined at:
   491 ;;		line 11 in file "NameScroll.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;  j               4    0[COMRAM] long 
   494 ;; Auto vars:     Size  Location     Type
   495 ;;  i               4    5[COMRAM] long 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, status,2, status,0
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   505 ;;      Params:         4       0       0       0       0       0       0
   506 ;;      Locals:         4       0       0       0       0       0       0
   507 ;;      Temps:          1       0       0       0       0       0       0
   508 ;;      Totals:         9       0       0       0       0       0       0
   509 ;;Total ram usage:        9 bytes
   510 ;; Hardware stack levels used: 1
   511 ;; This function calls:
   512 ;;		Nothing
   513 ;; This function is called by:
   514 ;;		_start_func
   515 ;;		_data
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text4
   520   00067A                     __ptext4:
   521                           	callstack 0
   522   00067A                     _delay:
   523                           	callstack 29
   524   00067A                     
   525                           ;NameScroll.c: 11: void delay(long j);NameScroll.c: 12: {;NameScroll.c: 13:     for(long
      +                           i=0;i<=j;i++);
   526   00067A  0E00               	movlw	0
   527   00067C  6E06               	movwf	delay@i^0,c
   528   00067E  0E00               	movlw	0
   529   000680  6E07               	movwf	(delay@i+1)^0,c
   530   000682  0E00               	movlw	0
   531   000684  6E08               	movwf	(delay@i+2)^0,c
   532   000686  0E00               	movlw	0
   533   000688  6E09               	movwf	(delay@i+3)^0,c
   534   00068A  EF4D  F003         	goto	l19
   535   00068E                     l781:
   536   00068E  0E01               	movlw	1
   537   000690  2606               	addwf	delay@i^0,f,c
   538   000692  0E00               	movlw	0
   539   000694  2207               	addwfc	(delay@i+1)^0,f,c
   540   000696  2208               	addwfc	(delay@i+2)^0,f,c
   541   000698  2209               	addwfc	(delay@i+3)^0,f,c
   542   00069A                     l19:
   543   00069A  5006               	movf	delay@i^0,w,c
   544   00069C  5C01               	subwf	delay@j^0,w,c
   545   00069E  5007               	movf	(delay@i+1)^0,w,c
   546   0006A0  5802               	subwfb	(delay@j+1)^0,w,c
   547   0006A2  5008               	movf	(delay@i+2)^0,w,c
   548   0006A4  5803               	subwfb	(delay@j+2)^0,w,c
   549   0006A6  5004               	movf	(delay@j+3)^0,w,c
   550   0006A8  0A80               	xorlw	128
   551   0006AA  6E05               	movwf	??_delay^0,c
   552   0006AC  5009               	movf	(delay@i+3)^0,w,c
   553   0006AE  0A80               	xorlw	128
   554   0006B0  5805               	subwfb	??_delay^0,w,c
   555   0006B2  B0D8               	btfsc	status,0,c
   556   0006B4  EF5E  F003         	goto	u61
   557   0006B8  EF60  F003         	goto	u60
   558   0006BC                     u61:
   559   0006BC  EF47  F003         	goto	l781
   560   0006C0                     u60:
   561   0006C0  0012               	return		;funcret
   562   0006C2                     __end_of_delay:
   563                           	callstack 0
   564                           
   565                           	psect	rparam
   566   000000                     tosu	equ	0xFFF
   567                           tosh	equ	0xFFE
   568                           tosl	equ	0xFFD
   569                           stkptr	equ	0xFFC
   570                           pclatu	equ	0xFFB
   571                           pclath	equ	0xFFA
   572                           pcl	equ	0xFF9
   573                           tblptru	equ	0xFF8
   574                           tblptrh	equ	0xFF7
   575                           tblptrl	equ	0xFF6
   576                           tablat	equ	0xFF5
   577                           prodh	equ	0xFF4
   578                           prodl	equ	0xFF3
   579                           indf0	equ	0xFEF
   580                           postinc0	equ	0xFEE
   581                           postdec0	equ	0xFED
   582                           preinc0	equ	0xFEC
   583                           plusw0	equ	0xFEB
   584                           fsr0h	equ	0xFEA
   585                           fsr0l	equ	0xFE9
   586                           wreg	equ	0xFE8
   587                           indf1	equ	0xFE7
   588                           postinc1	equ	0xFE6
   589                           postdec1	equ	0xFE5
   590                           preinc1	equ	0xFE4
   591                           plusw1	equ	0xFE3
   592                           fsr1h	equ	0xFE2
   593                           fsr1l	equ	0xFE1
   594                           bsr	equ	0xFE0
   595                           indf2	equ	0xFDF
   596                           postinc2	equ	0xFDE
   597                           postdec2	equ	0xFDD
   598                           preinc2	equ	0xFDC
   599                           plusw2	equ	0xFDB
   600                           fsr2h	equ	0xFDA
   601                           fsr2l	equ	0xFD9
   602                           status	equ	0xFD8

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     13      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    display@p	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    p	PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_display
    _start_func->_delay
    _display->_data
    _data->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1261
                                             11 COMRAM     2     2      0
                               _data
                            _display
                         _start_func
 ---------------------------------------------------------------------------------
 (1) _start_func                                           1     1      0     372
                                              9 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _display                                              1     0      1     493
                                             10 COMRAM     1     0      1
                               _data
 ---------------------------------------------------------------------------------
 (2) _data                                                 1     1      0     372
                                              9 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                9     5      4     350
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _data
     _delay
   _display
     _data
   _start_func
     _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      20        0.0%
BITBIGSFRl         282      0       0      18        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRhh         6A      0       0      16        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      D       F       1       15.8%
BITBIGSFRhl         10      0       0      17        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       F      19        0.0%
DATA                 0      0       F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Aug 07 10:25:40 2024

                      _p 000E                       l22 06C0                       l25 06F8  
                     l34 075C                       l42 0664                       l19 069A  
                     l28 0730                       u60 06C0                       u61 06BC  
                     u70 075C                       u71 0758                       u80 0640  
                     u81 063C                       u90 064E                       u91 064A  
                    l801 06CE                      l811 0742                      l803 06E2  
                    l813 0744                      l805 06E4                      l821 0624  
                    l807 0732                      l831 0660                      l823 062A  
                    l815 0608                      l809 0736                      l825 0632  
                    l817 0618                      l827 0640                      l819 061E  
                    l781 068E                      l829 064E                      l791 071A  
                    l783 06FC                      l793 071C                      l785 0700  
                    l779 067A                      l787 0704                      l795 06C4  
                    l789 0706                      l797 06C8                      l799 06CC  
                    _RC0 7C10                      _RC1 7C11                      _RC2 7C12  
                    _RC3 7C13                      u100 0672                      u101 066E  
                   STR_1 0601                     _data 06FA                     _main 0608  
                   start 0000             ___param_bank 0000                    ?_data 0001  
                  ?_main 0001                    _PORTD 0F83                    _TRISC 0F94  
                  _TRISD 0F95          __end_of_display 075E                    _delay 067A  
                  data@a 000A                    tablat 0FF5                    status 0FD8  
        __initialization 075E             __end_of_data 0732             __end_of_main 067A  
                 ??_data 000A                   ??_main 000C            __activetblptr 0001  
                 ?_delay 0001                   delay@i 0006                   delay@j 0001  
                 isa$std 0001                ??_display 000C             __mediumconst 0000  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
             __accesstop 0060  __end_of__initialization 0762            ___rparam_used 0001  
         __pcstackCOMRAM 0001            __end_of_delay 06C2                  ??_delay 0005  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0600  
                __pcinit 075E                  __ramtop 0600                  __ptext0 0608  
                __ptext1 06C2                  __ptext2 0732                  __ptext3 06FA  
                __ptext4 067A                  _display 0732     end_of_initialization 0762  
             _start_func 06C2      start_initialization 075E              start_func@a 000A  
            __pbssCOMRAM 000E              ?_start_func 0001                 ?_display 000B  
            __smallconst 0600                main@count 000C                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0600                 isa$xinst 0000  
               display@p 000B             ??_start_func 000A       __end_of_start_func 06FA  
